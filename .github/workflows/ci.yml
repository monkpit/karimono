name: CI

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Cache TypeScript build info
        uses: actions/cache@v4
        with:
          path: |
            .tsbuildinfo
            tsconfig.tsbuildinfo
          key: ${{ runner.os }}-tsc-${{ hashFiles('src/**/*.ts', 'tests/**/*.ts', 'tsconfig.json') }}

      - name: Run TypeScript type checking
        run: npm run typecheck

      - name: Check code formatting
        run: npm run format:check

      - name: Run linting
        run: npm run lint

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
          submodules: 'recursive' # Include Blargg and Mealybug test ROM submodules

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jestcache
          key: ${{ runner.os }}-jest-${{ hashFiles('src/**/*.ts', 'tests/**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-jest-

      - name: Cache coverage results
        uses: actions/cache@v4
        with:
          path: |
            coverage/
            !coverage/lcov-report/
          key: ${{ runner.os }}-coverage-${{ hashFiles('src/**/*.ts', 'tests/**/*.ts', 'jest.config.js') }}
          restore-keys: |
            ${{ runner.os }}-coverage-

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ hashFiles('src/**/*.ts', 'package.json', 'vite.config.ts') }}

      - name: Generate test coverage with threshold enforcement
        run: |
          # Run tests with coverage and capture exit code
          npm run test
          TEST_EXIT_CODE=$?

          # Store the test result for validation
          echo "TEST_EXIT_CODE=$TEST_EXIT_CODE" >> $GITHUB_ENV
        env:
          NODE_OPTIONS: --max_old_space_size=4096
          CI: true

      - name: Analyze coverage for hardware emulation components
        run: npm run coverage:analyze
        continue-on-error: false

      - name: Validate hardware accuracy with test ROMs
        run: |
          echo "üéÆ Validating emulator against real hardware test ROMs..."
          echo ""
          echo "Available Blargg test ROMs:"
          find tests/resources/blargg -name "*.gb" -type f | head -10
          echo ""
          echo "Available Mealybug test ROMs:"
          find tests/resources/mealybug -name "*.asm" -type f | head -10
          echo ""
          echo "‚úÖ Test ROM submodules successfully loaded"
          echo "Note: Hardware accuracy validation requires implementing emulator test harness"
          echo "      This step ensures test ROMs are available for TDD development"

      - name: Coverage threshold validation
        run: |
          echo "Coverage thresholds enforced:"
          echo "- CPU/Memory/PPU: 95% (critical hardware accuracy)"
          echo "- APU/Cartridge/Emulator: 90% (important components)"
          echo "- Utils/Helpers: 85% (utility functions)"
          echo "- UI/Components: 75% (frontend components)"
          echo "- Config: 70% (configuration files)"
          echo "- Global: 80% (overall project)"
          echo ""

          # Check if Jest tests and coverage thresholds were met
          if [ "$TEST_EXIT_CODE" -ne 0 ]; then
            echo "‚ùå Coverage thresholds not met. This indicates:"
            echo "1. Core emulator components may lack sufficient test coverage"
            echo "2. Hardware accuracy validation may be incomplete"
            echo "3. TDD practices may need reinforcement"
            echo ""
            echo "Review coverage report in CI artifacts or run 'npm run test:coverage:html' locally"
            exit 1
          else
            echo "‚úÖ All coverage thresholds met successfully"
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            coverage/
            !coverage/tmp/
          retention-days: 30
          if-no-files-found: error

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          flags: emulator
          name: game-boy-emulator-coverage

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7
          if-no-files-found: error
